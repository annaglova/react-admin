const fs = require("fs");
const path = require("path");
const SKIP_MARK = "// @MANUAL";

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
const resources = require("./src/resourcesList.json");
const MAIN_RESOURCES = resources.MAIN_RESOURCES || [];
const LOOKUP_RESOURCES = resources.LOOKUP_RESOURCES || [];
const ALL_RESOURCES = [...MAIN_RESOURCES, ...LOOKUP_RESOURCES];

// –¢—ñ–ª—å–∫–∏ —Ü—ñ –ø–æ–ª—è –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ
const EXCLUDE_FIELDS = [
  "created_on",
  "created_by_id",
  "modified_on",
  "modified_by_id",
  "updated_at",
  "created_at",
];

// --- –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏ –æ–∫—Ä–µ–º–æ ---
const validators = JSON.parse(
  fs.readFileSync(path.join("src", "validators.json"), "utf-8")
);

// –ú–∞–ø–∞ postgres ‚Üí React Admin Field
const typeMap = {
  integer: "NumberField",
  bigint: "NumberField",
  smallint: "NumberField",
  serial: "NumberField",
  uuid: "TextField",
  text: "TextField",
  varchar: "TextField",
  "character varying": "TextField",
  "timestamp without time zone": "DateField",
  "timestamp with time zone": "DateField",
  date: "DateField",
  boolean: "BooleanField",
  jsonb: "TextField",
  json: "TextField",
  "double precision": "NumberField",
  numeric: "NumberField",
};

function toPascalCase(str) {
  return str
    .split("_")
    .map((w) => w.charAt(0).toUpperCase() + w.slice(1))
    .join("");
}

function getColumnLabel(fieldName, table) {
  // –ü—ñ–¥—Ç—è–≥—É—î–º–æ isRequired —ñ–∑ validators.json, —è–∫—â–æ —Ç–∞–∫–∏–π —î
  const tableValidators = validators[table] || {};
  const isRequired = !!tableValidators[fieldName]?.isRequired;
  const label = fieldName
    .replace(/_/g, " ")
    .replace(/\b\w/g, (c) => c.toUpperCase());
  return isRequired ? `${label} *` : label;
}

function getMetaJson(table) {
  const filePath = path.join("src", "resources", table, `${table}.json`);
  if (!fs.existsSync(filePath)) {
    throw new Error(`Meta JSON for table "${table}" not found: ${filePath}`);
  }
  return JSON.parse(fs.readFileSync(filePath, "utf-8"));
}

function buildFieldMap(fields) {
  // name -> fieldMeta
  return Object.fromEntries(fields.map((f) => [f.name, f]));
}

for (const table of ALL_RESOURCES) {
  // 1. –ß–∏—Ç–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ json
  const meta = getMetaJson(table);

  // listFields ‚Äî –∑ custom.listFields, –∞–±–æ –≤—Å—ñ –∫—Ä—ñ–º EXCLUDE_FIELDS (—è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π)
  let listFieldNames = (meta.custom?.listFields || []).filter(Boolean);

  if (listFieldNames.length === 0) {
    listFieldNames = meta.fields
      .map((f) => f.name)
      .filter((name) => !EXCLUDE_FIELDS.includes(name));
  }

  const fieldMetaMap = buildFieldMap(meta.fields);

  // 2. –ì–æ—Ç—É—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏ —ñ –ø–æ–ª—è
  const usedTypes = new Set(["Datagrid", "List", "TextInput", "Pagination"]);
  const datagridFields = listFieldNames
    .map((fieldName) => {
      const meta = fieldMetaMap[fieldName];
      if (!meta) return null;
      let fieldType = typeMap[meta.type] || "TextField";
      usedTypes.add(fieldType);

      // --- –í–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏ –ø—ñ–¥—Ç—è–≥—É—î–º–æ –∑ validators.json ---
      const columnLabel = getColumnLabel(meta.name, table);

      // Foreign Key
      if (meta.isFk && meta.ref) {
        usedTypes.add("ReferenceField");
        return `      <ReferenceField source="${meta.name}" reference="${meta.ref}" label="${columnLabel}">
        <TextField source="name" />
      </ReferenceField>`;
      }
      return `      <${fieldType} source="${meta.name}" label="${columnLabel}" />`;
    })
    .filter(Boolean)
    .join("\n");

  // 3. –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ (basic)
  const filters = [
    `<TextInput label="–ü–æ—à—É–∫ –ø–æ —ñ–º–µ–Ω—ñ" source="name" alwaysOn />,`,
    `<TextInput label="–ü–æ—à—É–∫ –ø–æ id" source="id" />,`,
  ].join("\n  ");

  // 4. –ó–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª
  const Name = toPascalCase(table);
  const dir = path.join("src", "resources", table);
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });

  const code = `import { ${Array.from(usedTypes)
    .sort()
    .join(", ")} } from "react-admin";

const ${Name}Filters = [
  ${filters}
];

export const ${Name}List = () => (
  <List filters={${Name}Filters} perPage={15}  pagination={<Pagination />} >
    <Datagrid rowClick="show">
${datagridFields}
    </Datagrid>
  </List>
);
`;

  const fileName = `${Name}List.tsx`;
  const filePath = path.join(dir, fileName);

  // --- SKIP —è–∫—â–æ —Ä—É—á–Ω–∞ –º—ñ—Ç–∫–∞ ---
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, "utf-8");
    if (content.includes(SKIP_MARK)) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ ${fileName} (—Ä—É—á–Ω–∞ –º—ñ—Ç–∫–∞ @MANUAL)`);
      continue;
    }
  }

  fs.writeFileSync(filePath, code);
  console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${fileName} —É ${dir}`);
}
console.log(
  "üéâ –í—Å—ñ List-—Ñ–∞–π–ª–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –≤ src/resources/<resource>/<Name>List.tsx"
);
